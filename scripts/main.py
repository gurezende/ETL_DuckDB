# Imports
from extract import extract_data
from load import transform_and_load
from report import generate_report
import os
import time
from agno.agent import Agent
from agno.models.google import Gemini
from price_optimization import price_optimization
from utils import *
import pandas as pd


# 1. Extract data from API and save to parquet file
print("Extracting data from API...")

# Extract data from API and save to parquet file
extract_data(days=[-7, 0, -30],
             n=1000)

# 2. Transform data and save to parquet file
print("\n")
print("Preparing to transform and load data...")

# Read the current directory for parquet files
files = [f for f in os.listdir("./") if f.endswith(".parquet")]

# Transform data and save to parquet file
transform_and_load(files=files)

# 3. Generate report and send email
print("\n")
print("Data transformed and loaded...")
time.sleep(1)
print("Finding optimal prices for products...")
time.sleep(1)
print("Generating report and sending email...")
time.sleep(5)

# Generate report with AI Agent
agent = Agent(
    model= Gemini(id="gemini-2.0-flash", api_key=os.environ.get("GEMINI_API_KEY")),
    description="""You are an experienced Analyst that helps people to understand the data they are working with.
                    You are given a report to analyze the data in a clear and concise way.""",
    instructions="""
                    First, run the 'generate_report' tool. If it fails, try running it again.
                    Read the 'report.md' generated by the 'generate_report' tool and summarize the main points in a clear and concise way.
                    The summary should include:
                    - The store with the highest total revenue for that day.
                    - The store with the best performance over the last week and last month.
                    - The product with the highest total quantity sold for that day.
                    - The product with the best performance over the last week and last month.
                    - Analyze the optimized price and provide insights about the optimized price for each product.
                    - Actionable recommendations for the store and product.
                    If you don't know the answer, you can say 'I don't know'.""",
    tools=[generate_report],
    expected_output="""A report like response and marketing recommendation for the store and product.""",
    exponential_backoff=True,
    delay_between_retries=5,
    retries=2,
    show_tool_calls=True
)

# Prompt
prompt = "Analyze the tables and return a report like response with totals and marketing recommendation for each store and product."

# Run the agent and get the response
response = agent.run(prompt, markdown=True, stream=False).content

recipient_email = os.environ.get("RECIPIENT_EMAIL")
sender_email = os.environ.get("SENDER_EMAIL")
password = os.environ.get("EMAIL_PASSWORD")

# Send the report via email
send_email(recipient_email=recipient_email,
           sender_email=sender_email,
           sender_password=password,
           message=response,
           report_md="report.md",
           charts=["mosaic.png", "price_optimization.png"]
           )

# 4. Delete parquet files
print("\n")
print("Deleting parquet files...")

# delete parquet files
for f in os.listdir("./"):
    if f.endswith(".parquet"):
        os.remove(f)

print("\n")
print("All done...")


"""Main script for the data pipeline."""